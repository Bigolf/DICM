#include<iostream>
#include<cmath>
#include<algorithm>
using namespace std;
struct community
{
    int node[900][600];
    int priority=0;
    int edge;
};
community community1[900];
community MainCommunity[200];
bool compare(int a,int b)
{
    return a>b;
}
int main()
{
    int i,j,m,n,adjacencyMatrix[900][600],communityMatrix[1000][600],subnum=0;
    int xNodeNum=0,yNodeNum=0;
    for(i=0;i<900;i++)
        for(j=0;j<600;j++)
        {
            adjacencyMatrix[i][j]=0;
            communityMatrix[i][j]=0;
            
        }
    
    while(cin>>i>>j)
    {
        adjacencyMatrix[i][j]=1;
        communityMatrix[i][j]=1;
        if(xNodeNum<i)
        {
            xNodeNum=i;
        }
        if(yNodeNum<j)
        {
            yNodeNum=j;
        }
    }
    cout<<"123"<<endl;
    for(i=0;i<1000;i++)
    {
        for(m=0;m<xNodeNum;m++)
        {
            for(n=0;n<yNodeNum;n++)
            {
                community1[i].node[m][n]=0;
            }
        }
    }
    int xdegree=0,ydegree=0,communityXNode[200],communityYNode[200],p,communityXNodeNum=0,communityYNodeNum=0,insideEdge=0;
    double sum=0;
    for(i=0;i<=xNodeNum;i++)
    {
        for(j=0;j<=yNodeNum;j++)
        {
            if(adjacencyMatrix[i][j]!=0)
            {
                //  cout<<"subcommunity"<<i<<"   "<<j<<endl;
                // cout<<i<<j<<endl;
                for(p=0;p<1000;p++)
                {
                    communityXNode[p]=0;
                    communityYNode[p]=0;
                }
                
                communityYNodeNum=0;
                communityXNodeNum=0;
                community1[subnum].node[i][j]=1;
              
                for(n=1;n<=yNodeNum;n++)
                {
                    if(adjacencyMatrix[i][n] != 0)
                    {
                        for(m=1;m<=xNodeNum;m++)
                        {
                            insideEdge=0;
                            xdegree=0;
                            ydegree=0;
                        
                        
                            if(adjacencyMatrix[m][n] != 0 && community1[subnum].node[m][n]!=1)
                            {
                                //  cout<<"m="<<m<<" "<<"n="<<n<<endl;
                                for(p=0;p<=yNodeNum;p++)
                                {
                                    if(adjacencyMatrix[m][p]!=0)
                                        xdegree++;
                                }
                                for(p=0;p<=xNodeNum;p++)
                                {
                                    if(adjacencyMatrix[p][n]!=0)
                                        ydegree++;
                                }
        
                                //   cout<<insideEdge<<" "<<xdegree<<" "<<ydegree<<endl;
                                sum=(double)insideEdge*1.0/(double)(xdegree+ydegree);
                                //    cout<<sum<<endl;
                                int mark=0;
                                if(sum>=0.5)
                                {
                                    community1[subnum].node[m][n]=1;
                                    for(p=0;p<=communityXNodeNum;p++)
                                    {
                                        if(adjacencyMatrix[communityXNode[p]][n]==1)
                                        {
                                            community1[subnum].node[communityXNode[p]][n]=1;
                                            
                                        }
                                    }
                                    for(p=0;p<=communityYNodeNum;p++)
                                    {
                                        if(adjacencyMatrix[m][communityYNode[p]]==1)
                                        {
                                            
                                            community1[subnum].node[m][communityYNode[p]]=1;
                                        }
                                    }
                                   
                                    if(mark==0)
                                    {
                                        communityYNode[communityYNodeNum]=n;
                                        communityYNodeNum++;
                                    }
                                    sum=0;
                                }
                            }
                        }
                    }
                }
                for(m=1;m<=xNodeNum;m++)
                {
                    if(adjacencyMatrix[m][j]!=0)
                    {
                        for(n=1;n<=yNodeNum;n++)
                        {
                            insideEdge=0;
                            xdegree=0;
                            ydegree=0;
                            int summark=0;
                            if(adjacencyMatrix[m][n] != 0 && community1[subnum].node[m][n]!=1)
                            {
                                //    cout<<"m="<<m<<" "<<"n="<<n<<endl;
                                for(p=0;p<=yNodeNum;p++)
                                {
                                    if(adjacencyMatrix[m][p]!=0)
                                        xdegree++;
                                }
                                for(p=0;p<=xNodeNum;p++)
                                {
                                    if(adjacencyMatrix[p][n]!=0)
                                        ydegree++;
                                }
                                for(p=0;p<=communityYNodeNum;p++)
                                {
                                    if(adjacencyMatrix[m][p]!=0)
                                    {
                                        if(p==n)
                                            summark++;
                                        insideEdge++;
                                    }
                                }
                            
                            }
                        }
                    }
                }
                subnum++;
            }
        }
    }
    int k=0;
    int q;
            for(p=1;p<=xNodeNum;p++)
            {
                for(q=1;q<=yNodeNum;q++)
                {
                    if(adjacencyMatrix[p][q]==1)
                    {
                        cout<<"subcommunity"<<p<<"   "<<q<<endl;
                        for(i=1;i<=xNodeNum;i++)
                        {
                            for(j=1;j<=yNodeNum;j++)
                            {
                                cout<<community1[k].node[i][j]<<" ";
                            }
                             cout<<endl;
                        }
                      
                         cout<<endl;
                    }
                }
            }
    int subedge=0;
    int paixu[10000];
    for(i=0;i<1000;i++)
    {
        paixu[i]=0;
    }
    p=1;
    k=0;
    for(i=1;i<=xNodeNum;i++)
    {
        for(j=1;j<=yNodeNum;j++)
        {
            subedge=0;
            if(adjacencyMatrix[i][j]!=0)
            {
                for(m=1;m<=xNodeNum;m++)
                {
                    for(n=1;n<=yNodeNum;n++)
                    {
                        if(community1[k].node[m][n]==1)
                        {
                            subedge++;
                        }
                    }
                }
                community1[k].edge=subedge;
                paixu[p]=subedge;
                p++;
                k++;
            }
            
        }
    }
    sort(paixu,paixu+p,compare);
    //    for(i=0;i<p-1;i++)
    //    {
    //        cout<<paixu[i]<<endl;
    //    }
    int mark=0;
    k=0;
    for(i=0;i<p-1;i++)
    {
        mark=0;
        for(k=0;k<subnum;k++)
        {
            // cout<<"m="<<m<<" n="<<n<<endl;
            if(community1[k].edge == paixu[i]&&community1[k].priority==0)
            {
                // cout<<"SubCommunity[m][n].edge="<<SubCommunity[m][n].edge<<endl;
                community1[k].priority=i+1;
                //      cout<<"m="<<m<<" n="<<n<<" 123"<<endl;
                //     cout<<SubCommunity[m][n].priority<<endl;
                mark=1;
                k++;
            }
            if(mark==1)
            {
                break;
            }
        }
    }
    k=0;
    int priorityNum=p;
    //        for(i=0;i<=xNodeNum;i++)
    //        {
    //            for(j=0;j<=yNodeNum;j++)
    //            {
    //                if(adjacencyMatrix[i][j]==1)
    //                {
    //                     cout<<"i="<<i<<" j="<<j<<endl;
    //                    cout<<community1[k].priority<<endl;
    //                    k++;
    //                }
    //            }
    //        }
    for(i=0;i<=xNodeNum;i++)
    {
        for(j=0;j<=yNodeNum;j++)
        {
            communityMatrix[i][j]=adjacencyMatrix[i][j];
        }
    }
    
    int community1X[10000],community1Y[10000],community2X[10000],community2Y[10000];
    int sumNodeNum=0,equalNodeNum=0;
    double overlapRatio=0;
    int MainCommunityNum=0;
    int subCommunityNum=0;
    int mnIfCommunity=0;
    for(k=1;k<priorityNum;k++)
    {
        subCommunityNum=0;
        for(i=1;i<=xNodeNum;i++)
        {
            for(j=1;j<=yNodeNum;j++)
            {
                if(adjacencyMatrix[i][j]!=0)
                    subCommunityNum++;
                // cout<<"i="<<i<<" j="<<j<<endl;
                //   cout<<SubCommunity[i][j].priority<<" "<<communityMatrix[i][j]<<endl;
                if(community1[subCommunityNum].priority==k&&communityMatrix[i][j]!=0)
                {
                    //    cout<<SubCommunity[i][j].edge<<"  i="<<i<<" j="<<j<<endl;
                    communityMatrix[i][j]=0;
                    MainCommunity[MainCommunityNum].node[i][j]=1;
                    mark=0;
                    community1[subCommunityNum].priority=0;
                    mnIfCommunity=0;
                    for(m=1;m<=xNodeNum;m++)
                    {
                        for(n=1;n<=yNodeNum;n++)
                        {
                            sumNodeNum=0;
                            equalNodeNum=0;
                            if(adjacencyMatrix[m][n]!=0)
                            {
                                mnIfCommunity++;
                            }
                            for(p=0;p<=10000;p++)
                            {
                                community1X[p]=0;
                                community1Y[p]=0;
                                community2X[p]=0;
                                community2Y[p]=0;
                            }
                            if(i==m&&j==n)
                            {
                                
                                continue;
                            }
                            if(adjacencyMatrix[m][n]!=0)
                            {
                                for(p=0;p<=xNodeNum;p++)
                                {
                                    for(q=0;q<yNodeNum;q++)
                                    {
                                        if(community1[subCommunityNum].node[p][q]!=0)
                                        {
                                            community1X[p]=1;
                                            community1Y[q]=1;
                                        }
                                        if(community1[mnIfCommunity].node[p][q]!=0)
                                        {
                                            community2X[p]=1;
                                            community2Y[q]=1;
                                        }
                                    }
                                }
                                for(p=0;p<=xNodeNum;p++)
                                {
                                    if(community1X[p]==1||community2X[p]==1)
                                        sumNodeNum++;
                                }
                                for(p=0;p<=yNodeNum;p++)
                                {
                                    if(community1Y[p]==1||community2Y[p]==1)
                                        sumNodeNum++;
                                }
                                for(p=0;p<=xNodeNum;p++)
                                {
                                    if(community1X[p]==1&&community2X[p]==1)
                                        equalNodeNum++;
                                }
                                for(p=0;p<=yNodeNum;p++)
                                {
                                    if(community1Y[p]==1&&community2Y[p]==1)
                                        equalNodeNum++;
                                }
                                overlapRatio=(double)equalNodeNum*1.0/(double)sumNodeNum;
                                //        cout<<i<<" "<<j<<" "<<m<<" "<<n<<" "<<endl;
                                //        cout<<overlapRatio<<endl;
                                int isInclude=1;
                                for(p=0;p<=xNodeNum;p++)
                                {
                                    for(q=0;q<=yNodeNum;q++)
                                    {
                                        if(community1[mnIfCommunity].node[p][q]==1)
                                        {
                                            if(community1[subCommunityNum].node[p][q]==1)
                                            {
                                            }
                                            else
                                            {
                                                isInclude=0;
                                            }
                                        }
                                    }
                                }
                                cout<<"i="<<i<<" j= "<<j<<" m= "<<m<<" n= "<<n<<endl;
                                cout<<"IsInclude"<<isInclude<<endl;
                                if(overlapRatio>=0.2||isInclude==1)
                                {
                                    
                                    //   cout<<i<<" "<<j<<" "<<m<<" "<<n<<" "<<endl;
                                    // cout<<overlapRatio<<endl;
                                     cout<<"IsInclude"<<isInclude<<endl;
                                    MainCommunity[MainCommunityNum].node[m][n]=1;
                                    communityMatrix[m][n]=0;
                                    community1[mnIfCommunity].priority=0;
                                    mark=1;
                                }
                            }
                        }
                    }
                    if(mark==1)
                    {
                        MainCommunityNum++;
                        mark=0;
                    }
                    
                }
            }
        }
    }
    for(i=0;i<MainCommunityNum;i++)
    {
        for(m=1;m<=xNodeNum;m++)
        {
            for(n=1;n<=yNodeNum;n++)
            {
                cout<<MainCommunity[i].node[m][n]<<" ";
            }
            cout<<endl;
        }
        cout<<endl;
    }
    int netEdge=0;
    double belongMolecule=0,belongDenomiator=0,belongLevel=0;
    double modularity=0;
    double dx=0,dy=0;
    for(i=0;i<=xNodeNum;i++)
    {
        for(j=0;j<=yNodeNum;j++)
        {
            if(adjacencyMatrix[i][j]==1)
            {
                netEdge++;
            }
        }
    }
    for(i=0;i<MainCommunityNum;i++)
    {
        for(m=1;m<=xNodeNum;m++)
        {
            for(n=1;n<=yNodeNum;n++)
            {
                if(MainCommunity[i].node[m][n]==1)
                {
                    belongMolecule=0;
                    belongDenomiator=0;
                    dx=0;
                    dy=0;
                    for(p=1;p<=yNodeNum;p++)
                    {
                        if(MainCommunity[i].node[m][p]==1)
                        {
                            belongMolecule++;
                        }
                    }
                    for(p=1;p<yNodeNum;p++)
                    {
                        if(adjacencyMatrix[m][p]==1)
                        {
                            belongDenomiator++;
                            dy++;
                        }
                    }
                    belongLevel=belongMolecule/belongDenomiator;
                    belongMolecule=0;
                    belongDenomiator=0;
                    for(p=1;p<=xNodeNum;p++)
                    {
                        if(MainCommunity[i].node[p][n]==1)
                        {
                            belongMolecule++;
                        }
                    }
                    for(p=1;p<=xNodeNum;p++)
                    {
                        if(adjacencyMatrix[p][n]==1)
                        {
                            belongDenomiator++;
                            dx++;
                        }
                    }
                    belongLevel=belongMolecule/belongDenomiator*belongLevel;
                    modularity+=belongLevel*(1-dx*dy/netEdge);
                }
            }
        }
    }
    modularity=modularity/netEdge;
    cout<<"modularity="<<modularity<<endl;
    double edgecommunity=0,communityDensity=0,subCommunityDensity=0,degreeM=0,degreeN=0,edgeM=0,edgeN=0;
    double edge=0;
    for(i=0;i<MainCommunityNum;i++)
    {
        edgecommunity=0;
        edge=0;
        for(m=1;m<=xNodeNum;m++)
        {
            for(n=1;n<=yNodeNum;n++)
            {
                degreeM=0;
                degreeN=0;
                edgeM=0;
                edgeN=0;
                if(MainCommunity[i].node[m][n]==1)
                {
                    //   cout<<"m="<<m<<" n="<<n<<endl;
                    edge++;
                    for(p=1;p<=xNodeNum;p++)
                    {
                        if(adjacencyMatrix[p][n]==1)
                        {
                            degreeM++;
                        }
                        if(MainCommunity[i].node[p][n]==1)
                        {
                            edgeM++;
                        }
                    }
                    for(p=1;p<=yNodeNum;p++)
                    {
                        if(adjacencyMatrix[m][p]==1)
                        {
                            degreeN++;
                        }
                        if(MainCommunity[i].node[m][p]==1)
                        {
                            edgeN++;
                        }
                    }
                    edgecommunity+=(edgeM+edgeN)/(degreeN+degreeM);
                    // cout<<"edgeM="<<edgeM<<" edgeN="<<edgeN<<" degreeN"<<degreeN<<" degreeM="<<degreeM<<endl;
                    //cout<<edgecommunity<<endl;
                }
                
            }
        }
        subCommunityDensity+=edgecommunity/edge;
        //   cout<<"subCommunityDensity="<<subCommunityDensity<<endl;
    }
    communityDensity=subCommunityDensity/MainCommunityNum;
    cout<<"communityDensity="<<communityDensity<<endl;
    //    for(i=0;i<MainCommunityNum;i++)
    //    {
    //        for(m=1;m<=xNodeNum;m++)
    //        {
    //            for(n=1;n<=yNodeNum;n++)
    //            {
    //                cout<<MainCommunity[i].node[m][n]<<" ";
    //            }
    //            cout<<endl;
    //        }
    //        cout<<endl;
    //    }
    cout<<MainCommunityNum<<endl;
    return 0;
}

